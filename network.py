import argparse
import subprocess
import os
import socket
import time

def is_port_open():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect(('0.0.0.0', 65433))
        return True
    except ConnectionRefusedError:
        return False
    finally:
        sock.close()

def run_component(force_server=False, force_client=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π."""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    if force_server:
        print("üü¢ Forcing server mode")
        subprocess.run(["python", "server2.py"])
        return

    if force_client:
        print("üü¢ Forcing client mode")
        subprocess.run(["python", "client.py"])
        return

    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    if is_port_open():
        print("üîµ Server is running, starting client...")
        subprocess.run(["python", "client.py"])
    else:
        print("üîµ Server not found, starting server...")
        subprocess.run(["python", "server2.py"])

if __name__ == "__main__":
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
    for key_file in ["server_key.bin", "client_key.bin"]:
        if os.path.exists(key_file):
            os.remove(key_file)

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description="KEM Protocol Launcher")
    parser.add_argument('--server', action='store_true', help='Force server mode')
    parser.add_argument('--client', action='store_true', help='Force client mode')
    args = parser.parse_args()

    # –ó–∞–ø—É—Å–∫ —Å —É—á–µ—Ç–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    try:
        run_component(
            force_server=args.server,
            force_client=args.client
        )
    except KeyboardInterrupt:
        print("\nüö® Operation cancelled by user")